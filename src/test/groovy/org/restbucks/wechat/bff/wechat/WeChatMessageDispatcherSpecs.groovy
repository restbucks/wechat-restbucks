package org.restbucks.wechat.bff.wechat

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings
import org.restbucks.wechat.bff.wechat.messaging.NewsMessage
import org.restbucks.wechat.bff.wechat.messaging.WeChatMessageDispatcher
import org.restbucks.wechat.bff.wechat.messaging.WeChatMessageSender
import spock.lang.Specification

@SuppressFBWarnings(value = "SnVI",
        justification = "Caused by inner classes generated by spock")
class WeChatMessageDispatcherSpecs extends Specification {

    def subject

    def messageSender = Mock(WeChatMessageSender)

    def objectMapper = new WeChatConfig().xmlMapperForWeChatMessage()

    def publicBaseUri = "https://wechat.restbucks.org"

    def setup() {
        subject = new WeChatMessageDispatcher(messageSender, objectMapper)
    }

    def "it should dispatch message to corresponding handler"() {

        given: "a qrcode scanned event"
        def payload = """
            <xml>
                <ToUserName><![CDATA[toUser]]></ToUserName>
                <FromUserName><![CDATA[FromUser]]></FromUserName>
                <CreateTime>123456789</CreateTime>
                <MsgType><![CDATA[event]]></MsgType>
                <Event><![CDATA[subscribe]]></Event>
                <EventKey><![CDATA[qrscene_store_123]]></EventKey>
                <Ticket><![CDATA[TICKET]]></Ticket>
            </xml>
        """

        when: "message dispatcher receives the event"
        subject.dispatch(payload)

        then: "should send a news message"
        with(messageSender) {
            1 * send(new NewsMessage("FromUser",
                    NewsMessage.Article.builder()
                            .title("Welcome to Restbucks Store 123")
                            .url(publicBaseUri + "/index.html#/place-order-form/123")))
        }

    }
}
